import os
import sys
import glob
import argparse
from modules import *


def parse_args(args):
    """
    读取命令行参数
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("--input-dir", type=str, default="images", help="path to the input image or folder of input images")
    parser.add_argument("--operator", choices=["Roberts", "Sobel", "Prewitt", "Canny"], default="Sobel", help="type of gradient operator")
    parser.add_argument("--th-low", type=int, default=50, help="low threshold for edge detection")
    parser.add_argument("--th-high", type=int, default=150, help="high threshold for edge detection")
    parser.add_argument('--otsu', type=bool, default=False, help="whether to use otsu to choose thresholds adaptively")
    parser.add_argument('--sigma', type=float, default=0.2, help="sigma for Gaussian Blur")
    parser.add_argument("--output-dir", type=str, default="edges", help="path to folder of output images")
    parser.add_argument("--output-type", type=str, default="png", help="layout of output images")
    parser.add_argument("--compare", type=bool, default=False, help="whether to compare with the edges generated by OpenCV")

    args = parser.parse_args(args)
    return args


def get_image_paths(input_dir, extensions = ("jpg", "jpeg", "png", "bmp")):
    """
    找到所有图片文件路径
    """
    # 输入是图片文件路径
    if os.path.isfile(input_dir):
        assert any(input_dir.lower().endswith(extension) for extension in extensions)
        return [input_dir]

    # 输入是文件夹路径
    pattern = f"{input_dir}/**/*"
    img_paths = []

    for extension in extensions:
        img_paths.extend(glob.glob(f"{pattern}.{extension}", recursive=True))

    if not img_paths:
        raise FileNotFoundError(f"No images found in {input_dir}. Supported formats are: {', '.join(extensions)}")

    return img_paths


def create_model(args):
    """
    搭建边缘检测模型
    """
    model = Sequential(
        GrayScale(), 
        GaussFilter(kernel_size=(3, 3), sigma=args.sigma, type='opencv'), 
        CalcGrad(operator=args.operator),
        NMSuppression(), 
        DoubleThreshold(args.th_low, args.th_high, otsu=args.otsu)
    )
    return model


def edge_opencv(img_path):
    """
    生成使用opencv进行边缘检测的图像
    """
    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
    img = cv2.Canny(img, 50, 150)
    return img


def main(args):
    args = parse_args(args)

    img_paths = get_image_paths(args.input_dir)
    model = create_model(args)
    for img_path in img_paths:
        img = Image(img_path)
        img = model(img)

        original_filename = os.path.splitext(os.path.basename(img_path))[0]
        output_name = f"{original_filename}-{args.operator}"
        output_name += f"-{args.sigma}"
        if args.otsu:
            output_name += "-otsu"
        else:
            output_name += f"-{args.th_low}-{args.th_high}"
        if args.compare:
            output_name += f"-compare.{args.output_type}"
            img_cv = edge_opencv(img_path)
            img.save(args.output_dir, output_name, compare=img_cv)
        else:
            output_name += f".{args.output_type}"
            img.save(args.output_dir, output_name)
    
    print(f"{len(img_paths)} figures successfully saved to {args.output_dir}")


if __name__ == '__main__':
    main(sys.argv[1:])